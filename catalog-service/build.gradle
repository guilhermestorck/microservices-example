buildscript {
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'jacoco'

    version '0.1'
    group 'catalog-service'

    repositories {
        maven {
            name = "localRepo"
            url = "/home/gstorck/workspace/micronaut/market/repo"
        }
        jcenter()
        mavenCentral()
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            javaParameters = true
        }
    }

    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
            javaParameters = true
        }
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.31'
        implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.31"

        testImplementation "org.spekframework.spek2:spek-dsl-jvm:2.0.5"
        testRuntimeOnly "org.spekframework.spek2:spek-runner-junit5:2.0.5"

        testImplementation "io.mockk:mockk:1.9.kotlin12"
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    publishing {
        repositories {
            maven {
                name = "localRepo"
                url = "/home/gstorck/workspace/micronaut/market/repo"
            }
        }
    }

    junitPlatform {
        filters {
            engines {
                include 'spek2'
            }
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'spek2'
        }

        beforeTest { descriptor ->
            logger.lifecycle("Running test: ($descriptor.className) $descriptor.name")
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                excludes = ['*.conf.*', '*.domains.*']
                limit {
                    counter = 'LINE'
                    minimum = 1
                }
            }
        }

        executionData.from = files("$buildDir/jacoco/junitExecutionData.exec")
        sourceSets sourceSets.main
        sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
        classDirectories.from = files(sourceSets.main.output)
    }

    jacoco {
        toolVersion = "0.8.4"
        reportsDir = file("$buildDir/jacoco")

        applyTo junitPlatformTest
    }

    junitPlatformTest {
        jacoco {
            destinationFile = file("$buildDir/jacoco/junitExecutionData.exec")
        }
    }

    jacocoTestReport {
        executionData.from = files("$buildDir/jacoco/junitExecutionData.exec")

        reports {
            csv.enabled = false
            xml.enabled = false
            html.enabled = true
            html.destination file("$buildDir/jacoco/html")
        }

        sourceSets sourceSets.main
        sourceDirectories.from = files(sourceSets.main.allSource.srcDirs)
        classDirectories.from = files(sourceSets.main.output)
    }

    test.dependsOn junitPlatformTest
    test.finalizedBy jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification

}
